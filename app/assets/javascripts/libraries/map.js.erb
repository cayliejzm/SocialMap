$(document).ready(function () {
var width = 800,
    height = 500;
var projection = d3.geo.mercator()
    .center([0, 5 ])
    .scale(200)
    .rotate([-180,0]);
var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);
var path = d3.geo.path()
    .projection(projection);
var g = svg.append("g");
// load and display the World
// http://localhost:3000/cities.json //////////////////////////////////////

d3.json("<%= asset_path 'world-110m2.json' %>", function(error, topology) { // Asset path to JSON file. //
  console.log(topology);
// load and display the cities
// d3.csv("cities.csv", function(error, data) {
$.ajax('http://localhost:3000/cities.json').done(function(data){
  console.log( data );
  // debugger
    g.selectAll("circle")
       .data(data)
       .enter()
       .append("a")
          .attr("xlink:href", function(d) {
            // debugger
            return "http://localhost:3000/cities/"+d.id;}
          )
       .append("circle")
       .attr("cx", function(d) {
               return projection([d.longitude, d.latitude])[0];
       })
       .attr("cy", function(d) {
               return projection([d.longitude, d.latitude])[1];
       })
       .attr("r", (function(d){ return d.foodTweetLength }) )
       .style("fill", "black");


// foodtweetlength :integer,
// @foodtweetlength =

// add food, night, health values into cities table
//declare global variables in cities controller show and index
//make a rake task  -- for every city in database, send off request for each city at once instead of loading
//use global variables in map.js.erb as representation of pixel size "@foodlength"

    // g.selectAll("circle")
    //   .data( data )
    //   .enter()
    //   .append("a")
    //     .attr("xlink:href", function(d) {
    //       return "http://localhost:3000/cities/"+d.id;}
    //     )
    //   .append("circle")
    //   .attr("cx", function(d) {
    //     // debugger
    //           return projection([(d.longitude + 1), (d.latitude + 1)])[0];
    //   })
    //   .attr("cy", function(d) {
    //           return projection([d.longitude - 0.5, d.latitude -0.5])[1];
    //   })
    //   .attr("r", 5)
    //   .style("fill", "green");
      // debugger

});

g.selectAll("path")
      .data(topojson.object(topology, topology.objects.countries)
          .geometries)
      .enter()
      .append("path")
      .attr("d", path)
});

var zoom = d3.behavior.zoom()
    .on("zoom",function() {
        g.attr("transform","translate("+
            d3.event.translate.join(",")+")scale("+d3.event.scale+")");
        g.selectAll("circle")
            .attr("d", path.projection(projection));
        g.selectAll("path")
            .attr("d", path.projection(projection));
  });
svg.call(zoom)
});
